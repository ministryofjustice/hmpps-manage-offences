/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/admin/toggle-feature': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Enable / disable a feature */
    put: operations['toggleFeature']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedule/unlink-offences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Unlink offences from schedules - will also unlink any associated inchoate offences (i.e. if any of the passed in offences have children they will also be unlinked) */
    post: operations['unlinkOffences']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedule/link-offence': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Link offence to a schedule part - will also link any associated inchoate offences (i.e. if passed in offence has children they will also be linked) */
    post: operations['linkOffences']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedule/create': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Create a schedule */
    post: operations['createSchedule']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/nomis/offences/reactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Reactivate offences in NOMIS
     * @description Reactivate offences in NOMIS, only to be used for offences that are end dated but NOMIS need them to be reactivated
     */
    post: operations['reactivateNomisOffence']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/nomis/offences/encouragement/{parentOffenceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create encouragement offence for parent offence
     * @description Encouragement offence creates a new record with existing parent offence value, but with 'E' suffix to the offence code
     */
    post: operations['createEncouragementOffence']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/nomis/offences/deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Deactivate offences in NOMIS
     * @description Deactivate offences in NOMIS, only to be used for offences that are end dated but are active in NOMIS
     */
    post: operations['deactivateNomisOffence']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedule/torera-offence-codes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getToreraOffenceCodes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedule/sds-early-release-exclusions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Determine if the passed in offence codes are to be excluded from early release due to being Sexual, Violent, Domestic Abuse, National Security or Terrorism.
     * @description This endpoint will return a list of offences and the exclusion category if applicable.
     */
    get: operations['getSdsExclusionInformation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedule/sds-early-release-exclusion-lists': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves the lists of all the offences that are to be excluded from early release.
     * @description This returns five lists for Sexual, Violent, Domestic Abuse, National Security or Terrorism offences.
     */
    get: operations['getSdsExclusionLists']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedule/pcsc-lists': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve all PCSC lists
     * @description This endpoint will return all four PCSC lists
     */
    get: operations['getPcscLists']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedule/pcsc-indicators': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Determine if the passed in offence codes are related to any of the PCSC lists
     * @description This endpoint will return a list of offences and whether they are im any of the PCSC lists
     */
    get: operations['getPcscMarkers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedule/offence-mapping/id/{offenceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get offence matching the passed ID - with schedule related data
     * @description This endpoint will return the offence that matches the unique ID passed in
     */
    get: operations['getOffenceToScheduleMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedule/by-id/{scheduleId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get schedule by ID - includes all scheduled parts and mapped offences */
    get: operations['findScheduleById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedule/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Find all schedules - does not include mapped offences */
    get: operations['findAllSchedules']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offences/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all offences matching the passed offence code, does a start with match
     * @description This endpoint will return the offences that start with the passed offence code
     */
    get: operations['searchOffences']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offences/load-results': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the results of the most recent load
     * @description Get the results of the most recent load
     */
    get: operations['findLoadResults']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offences/id/{offenceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get offence matching the passed ID
     * @description This endpoint will return the offence that matches the unique ID passed in
     */
    get: operations['getOffenceById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offences/ho-code/{offenceCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the HO Code associated with an offence code
     * @description This endpoint will return the HO Code associated with an offence code, could return null
     */
    get: operations['getHoCodeByOffenceCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offences/code/{offenceCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all offences matching the passed offence code, does a start with match
     * @description This endpoint will return the offences that start with the passed offence code
     */
    get: operations['getOffencesByOffenceCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offences/code/unique/{offenceCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the unique offence matching the passed offence code
     * @description This endpoint will return the offence that matches the unique code passed in
     */
    get: operations['getOffenceByCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/offences/code/multiple': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a list of offences that match the passed in list of offence codes
     * @description This endpoint will return the offences that match the codes passed in
     */
    get: operations['getOffencesByCodes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/change-history/nomis': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Fetch changes pushed to NOMIS between a from and to date range (to defaults to now) */
    get: operations['getOffencesByOffenceCode_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/admin/feature-toggles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get values of all feature toggles */
    get: operations['getAllToggles']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Feature toggle details */
    FeatureToggle: {
      /**
       * @description Feature to be toggled: FULL_SYNC_NOMIS, DELTA_SYNC_NOMIS, FULL_SYNC_SDRS or DELTA_SYNC_SDRS
       * @enum {string}
       */
      feature:
        | 'FULL_SYNC_NOMIS'
        | 'DELTA_SYNC_NOMIS'
        | 'FULL_SYNC_SDRS'
        | 'DELTA_SYNC_SDRS'
        | 'SYNC_HOME_OFFICE_CODES'
        | 'PUBLISH_EVENTS'
        | 'UNLINK_SCHEDULES_NOMIS'
        | 'LINK_SCHEDULES_NOMIS'
        | 'T3_OFFENCE_EXCLUSIONS'
      /** @description true or false - depending on whether the feature should be enabled */
      enabled: boolean
    }
    /** @description Schedule part ID and Offence ID - used for unlinking offences from schedules */
    SchedulePartIdAndOffenceId: {
      /** Format: int64 */
      schedulePartId: number
      /** Format: int64 */
      offenceId: number
    }
    LinkOffence: {
      /**
       * Format: int64
       * @description Unique ID of the offence
       */
      offenceId: number
      /**
       * Format: int64
       * @description The offence code
       */
      schedulePartId: number
      /** @description The line reference for the associated schedule's legislation */
      lineReference?: string
      /** @description The legislation text for the associated schedule */
      legislationText?: string
      /** @description Schedule paragraph title that this offence is mapped to */
      paragraphTitle?: string
      /** @description Schedule paragraph number that this offence is mapped to */
      paragraphNumber?: string
    }
    /** @description A list of child offence ID's; i.e. inchoate offences linked to this offence */
    BasicOffence: {
      /**
       * Format: int64
       * @description Unique ID of the offence
       */
      id: number
      /** @description The offence code */
      code: string
      /** @description The offence description (taken from SDRS CJSTitle field) */
      description?: string
      /**
       * Format: date
       * @description The offence start date
       */
      startDate: string
      /**
       * Format: date
       * @description The offence end date
       */
      endDate?: string
    }
    /** @description Schedule details when associated to an offence */
    LinkedScheduleDetails: {
      /** Format: int64 */
      id: number
      act: string
      code: string
      url?: string
      /** Format: int32 */
      partNumber: number
      paragraphNumber?: string
      paragraphTitle?: string
      lineReference?: string
      legislationText?: string
    }
    OffenceToScheduleMapping: {
      /**
       * Format: int64
       * @description Unique ID of the offence
       */
      id: number
      /** @description The offence code */
      code: string
      /** @description The offence description (taken from SDRS CJSTitle field) */
      description?: string
      /** @description The offence type (e.g CI) */
      offenceType?: string
      /**
       * Format: int32
       * @description The revision number of the offence
       */
      revisionId: number
      /**
       * Format: date
       * @description The offence start date
       */
      startDate: string
      /**
       * Format: date
       * @description The offence end date
       */
      endDate?: string
      /** @description The offence's home office stats code */
      homeOfficeStatsCode?: string
      /**
       * Format: date-time
       * @description The date this offence was last changed in SDRS
       */
      changedDate: string
      /**
       * Format: date-time
       * @description The date this offence was loaded into manage-offences from SDRS
       */
      loadDate?: string
      /** @description The schedules linked to this offence */
      schedules?: components['schemas']['LinkedScheduleDetails'][]
      /** @description If true then this is a inchoate offence; i.e. a child of another offence */
      isChild: boolean
      /**
       * Format: int64
       * @description The parent offence id of an inchoate offence
       */
      parentOffenceId?: number
      /** @description A list of child offence ID's; i.e. inchoate offences linked to this offence */
      childOffences?: components['schemas']['BasicOffence'][]
      /** @description The legislation associated to this offence (from actsAndSections in the SDRS response) */
      legislation?: string
      /** @description Set to true if max period is life */
      maxPeriodIsLife?: boolean
      /**
       * Format: int32
       * @description Set to the max period of indictment in years
       */
      maxPeriodOfIndictmentYears?: number
      /**
       * Format: int32
       * @description Set to the max period of indictment in months
       */
      maxPeriodOfIndictmentMonths?: number
      /**
       * Format: int32
       * @description Set to the max period of indictment in weeks
       */
      maxPeriodOfIndictmentWeeks?: number
      /**
       * Format: int32
       * @description Set to the max period of indictment in days
       */
      maxPeriodOfIndictmentDays?: number
      /** @description The line reference for the associated schedule's legislation */
      lineReference?: string
      /** @description The legislation text for the associated schedule */
      legislationText?: string
      /** @description Schedule paragraph title that this offence is mapped to */
      paragraphTitle?: string
      /** @description Schedule paragraph number that this offence is mapped to */
      paragraphNumber?: string
    }
    /** @description Schedule details */
    Schedule: {
      /** Format: int64 */
      id: number
      act: string
      code: string
      url?: string
      scheduleParts?: components['schemas']['SchedulePart'][]
    }
    /** @description Schedule part details and associated offences */
    SchedulePart: {
      /** Format: int64 */
      id: number
      /** Format: int32 */
      partNumber: number
      offences?: components['schemas']['OffenceToScheduleMapping'][]
    }
    /** @description Offence details */
    Offence: {
      /**
       * Format: int64
       * @description Unique ID of the offence
       */
      id: number
      /** @description The offence code */
      code: string
      /** @description The offence description (taken from SDRS CJSTitle field) */
      description?: string
      /** @description The offence type (e.g CI) */
      offenceType?: string
      /**
       * Format: int32
       * @description The revision number of the offence
       */
      revisionId: number
      /**
       * Format: date
       * @description The offence start date
       */
      startDate: string
      /**
       * Format: date
       * @description The offence end date
       */
      endDate?: string
      /** @description The offence's home office stats code */
      homeOfficeStatsCode?: string
      /** @description The offence's home office description */
      homeOfficeDescription?: string
      /**
       * Format: date-time
       * @description The date this offence was last changed in SDRS
       */
      changedDate: string
      /**
       * Format: date-time
       * @description The date this offence was loaded into manage-offences from SDRS
       */
      loadDate?: string
      /** @description The schedules linked to this offence */
      schedules?: components['schemas']['LinkedScheduleDetails'][]
      /** @description If true then this is a inchoate offence; i.e. a child of another offence */
      isChild: boolean
      /**
       * Format: int64
       * @description The parent offence id of an inchoate offence
       */
      parentOffenceId?: number
      /** @description A list of child offence ID's; i.e. inchoate offences linked to this offence */
      childOffenceIds?: number[]
      /** @description The legislation associated to this offence (from actsAndSections in the SDRS response) */
      legislation?: string
      /** @description Set to true if max period is life */
      maxPeriodIsLife?: boolean
      /**
       * Format: int32
       * @description Set to the max period of indictment in years
       */
      maxPeriodOfIndictmentYears?: number
      /**
       * Format: int32
       * @description Set to the max period of indictment in months
       */
      maxPeriodOfIndictmentMonths?: number
      /**
       * Format: int32
       * @description Set to the max period of indictment in weeks
       */
      maxPeriodOfIndictmentWeeks?: number
      /**
       * Format: int32
       * @description Set to the max period of indictment in days
       */
      maxPeriodOfIndictmentDays?: number
      /**
       * @description Yes if the offence caries a custodial sentence, Either if it does when tried as an indictment and No otherwise.
       * @enum {string}
       */
      custodialIndicator?: 'Y' | 'N' | 'E'
    }
    /** @description Categorises the offence based on the exclusion list it appears in */
    OffenceSdsExclusion: {
      offenceCode: string
      /**
       * @description Categories for the offence
       * @enum {string}
       */
      schedulePart:
        | 'SEXUAL'
        | 'SEXUAL_T3'
        | 'DOMESTIC_ABUSE'
        | 'DOMESTIC_ABUSE_T3'
        | 'VIOLENT'
        | 'NONE'
        | 'NATIONAL_SECURITY'
        | 'TERRORISM'
        | 'MURDER_T3'
    }
    /** @description Contains the list of all the offences that are sexual, domestic abuse, national security, terrorism or violent */
    SdsExclusionLists: {
      /** @description Offence falls under the Sexual category */
      sexual: components['schemas']['OffenceToScheduleMapping'][]
      /** @description Offence falls under the Domestic Abuse category */
      domesticAbuse: components['schemas']['OffenceToScheduleMapping'][]
      /** @description Offence falls under the National Security category */
      nationalSecurity: components['schemas']['OffenceToScheduleMapping'][]
      /** @description Offence falls under the Violent category */
      violent: components['schemas']['OffenceToScheduleMapping'][]
      /** @description Offence falls under the Terrorism category */
      terrorism: components['schemas']['OffenceToScheduleMapping'][]
    }
    PcscLists: {
      /** @description Schedule 15 Part 1 + Schedule 15 Part 2 that attract life (exclude all offences that start on or after 28 June 2022) */
      listA: components['schemas']['OffenceToScheduleMapping'][]
      /** @description SDS between 4 and 7 years : Schedule 15 Part 2 that attract life + serious violent offences */
      listB: components['schemas']['OffenceToScheduleMapping'][]
      /** @description Sec250 >7 years = List C: Schedule 15 Part 2 that attract life + serious violent offences (same as List B) */
      listC: components['schemas']['OffenceToScheduleMapping'][]
      /** @description Schedule 15 Part 1 + Schedule 15 Part 2 that attract life */
      listD: components['schemas']['OffenceToScheduleMapping'][]
    }
    /** @description Shows which (if any) PCSC Marker the offence relates to */
    OffencePcscMarkers: {
      offenceCode: string
      pcscMarkers: components['schemas']['PcscMarkers']
    }
    PcscMarkers: {
      /** @description Schedule 15 Part 1 + Schedule 15 Part 2 that attract life (exclude all offences that start on or after 28 June 2022) */
      inListA: boolean
      /** @description SDS between 4 and 7 years : Schedule 15 Part 2 that attract life + serious violent offences */
      inListB: boolean
      /** @description Sec250 >7 years = List C: Schedule 15 Part 2 that attract life + serious violent offences (same as List B) */
      inListC: boolean
      /** @description Schedule 15 Part 1 + Schedule 15 Part 2 that attract life */
      inListD: boolean
    }
    /** @description Details of the load by SDRS Cache */
    MostRecentLoadResult: {
      /**
       * @description Associated SDRS Cache - indicates the part of the SDRS load this status relates to
       * @enum {string}
       */
      sdrsCache:
        | 'OFFENCES_A'
        | 'OFFENCES_B'
        | 'OFFENCES_C'
        | 'OFFENCES_D'
        | 'OFFENCES_E'
        | 'OFFENCES_F'
        | 'OFFENCES_G'
        | 'OFFENCES_H'
        | 'OFFENCES_I'
        | 'OFFENCES_J'
        | 'OFFENCES_K'
        | 'OFFENCES_L'
        | 'OFFENCES_M'
        | 'OFFENCES_N'
        | 'OFFENCES_O'
        | 'OFFENCES_P'
        | 'OFFENCES_Q'
        | 'OFFENCES_R'
        | 'OFFENCES_S'
        | 'OFFENCES_T'
        | 'OFFENCES_U'
        | 'OFFENCES_V'
        | 'OFFENCES_W'
        | 'OFFENCES_X'
        | 'OFFENCES_Y'
        | 'OFFENCES_Z'
        | 'GET_APPLICATIONS'
        | 'GET_MOJ_OFFENCE'
      /**
       * @description Load Status: SUCCESS or FAIL
       * @enum {string}
       */
      status?: 'SUCCESS' | 'FAIL'
      /**
       * @description Load Type: FULL_LOAD or UPDATE
       * @enum {string}
       */
      type?: 'FULL_LOAD' | 'UPDATE'
      /**
       * Format: date-time
       * @description The date and time of the load
       */
      loadDate?: string
      /**
       * Format: date-time
       * @description The date and time of the most recent successful load; if the load was successful this is the same as the loadDate
       */
      lastSuccessfulLoadDate?: string
    }
    /** @description This shows a change to NOMIS */
    NomisChangeHistory: {
      /** Format: int64 */
      id: number
      /** @description This is set depending on the nomisChangeType - could be the code of the offence, statute or Home Office Stats */
      code: string
      /** @description This description of the nomisChangeType */
      description: string
      /**
       * @description Could be INSERT or UPDATE
       * @enum {string}
       */
      changeType: 'INSERT' | 'DELETE' | 'UPDATE'
      /**
       * @description Could be OFFENCE or STATUTE
       * @enum {string}
       */
      nomisChangeType: 'OFFENCE' | 'STATUTE'
      /**
       * Format: date-time
       * @description The date this change was made in NOMIS
       */
      sentToNomisDate: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  toggleFeature: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['FeatureToggle'][]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  unlinkOffences: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SchedulePartIdAndOffenceId'][]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  linkOffences: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LinkOffence']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  createSchedule: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Schedule']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  reactivateNomisOffence: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  createEncouragementOffence: {
    parameters: {
      query?: never
      header?: never
      path: {
        parentOffenceId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Offence']
        }
      }
    }
  }
  deactivateNomisOffence: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getToreraOffenceCodes: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
    }
  }
  getSdsExclusionInformation: {
    parameters: {
      query: {
        offenceCodes: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenceSdsExclusion'][]
        }
      }
    }
  }
  getSdsExclusionLists: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SdsExclusionLists']
        }
      }
    }
  }
  getPcscLists: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PcscLists']
        }
      }
    }
  }
  getPcscMarkers: {
    parameters: {
      query: {
        offenceCodes: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffencePcscMarkers'][]
        }
      }
    }
  }
  getOffenceToScheduleMapping: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offence ID
         * @example 123456
         */
        offenceId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenceToScheduleMapping']
        }
      }
    }
  }
  findScheduleById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The schedule ID
         * @example 1000011
         */
        scheduleId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Schedule']
        }
      }
    }
  }
  findAllSchedules: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Schedule'][]
        }
      }
    }
  }
  searchOffences: {
    parameters: {
      query: {
        searchString: string
        excludeLegislation?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Offence'][]
        }
      }
    }
  }
  findLoadResults: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MostRecentLoadResult'][]
        }
      }
    }
  }
  getOffenceById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offence ID
         * @example 123456
         */
        offenceId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Offence']
        }
      }
    }
  }
  getHoCodeByOffenceCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offence code
         * @example AA1256A
         */
        offenceCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Offence code exists and associated hoCode returned (could be null/empty) */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
      /** @description No offence exists for the passed in offence code */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
    }
  }
  getOffencesByOffenceCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offence code
         * @example AA1256A
         */
        offenceCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Offence'][]
        }
      }
    }
  }
  getOffenceByCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offence Code
         * @example COML025
         */
        offenceCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Offence']
        }
      }
    }
  }
  getOffencesByCodes: {
    parameters: {
      query: {
        offenceCodes: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Offence'][]
        }
      }
    }
  }
  getOffencesByOffenceCode_1: {
    parameters: {
      query: {
        from: string
        to?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NomisChangeHistory'][]
        }
      }
    }
  }
  getAllToggles: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FeatureToggle'][]
        }
      }
    }
  }
}
